// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	model "messageprocessor/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddProcessedMessage mocks base method.
func (m *MockStorage) AddProcessedMessage(id int, msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProcessedMessage", id, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProcessedMessage indicates an expected call of AddProcessedMessage.
func (mr *MockStorageMockRecorder) AddProcessedMessage(id, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProcessedMessage", reflect.TypeOf((*MockStorage)(nil).AddProcessedMessage), id, msg)
}

// GetDownMessages mocks base method.
func (m *MockStorage) GetDownMessages() ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownMessages")
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownMessages indicates an expected call of GetDownMessages.
func (mr *MockStorageMockRecorder) GetDownMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownMessages", reflect.TypeOf((*MockStorage)(nil).GetDownMessages))
}

// GetNewOutbox mocks base method.
func (m *MockStorage) GetNewOutbox(ctx context.Context) (*model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewOutbox", ctx)
	ret0, _ := ret[0].(*model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewOutbox indicates an expected call of GetNewOutbox.
func (mr *MockStorageMockRecorder) GetNewOutbox(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewOutbox", reflect.TypeOf((*MockStorage)(nil).GetNewOutbox), ctx)
}

// PostMessage mocks base method.
func (m *MockStorage) PostMessage(msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockStorageMockRecorder) PostMessage(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockStorage)(nil).PostMessage), msg)
}

// SetDown mocks base method.
func (m *MockStorage) SetDown(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDown", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDown indicates an expected call of SetDown.
func (mr *MockStorageMockRecorder) SetDown(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDown", reflect.TypeOf((*MockStorage)(nil).SetDown), id)
}
