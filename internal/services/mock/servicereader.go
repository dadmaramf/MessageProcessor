// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_messagereader is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceReader is a mock of ServiceReader interface.
type MockServiceReader struct {
	ctrl     *gomock.Controller
	recorder *MockServiceReaderMockRecorder
}

// MockServiceReaderMockRecorder is the mock recorder for MockServiceReader.
type MockServiceReaderMockRecorder struct {
	mock *MockServiceReader
}

// NewMockServiceReader creates a new mock instance.
func NewMockServiceReader(ctrl *gomock.Controller) *MockServiceReader {
	mock := &MockServiceReader{ctrl: ctrl}
	mock.recorder = &MockServiceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceReader) EXPECT() *MockServiceReaderMockRecorder {
	return m.recorder
}

// StartConsumerProcessingMessage mocks base method.
func (m *MockServiceReader) StartConsumerProcessingMessage(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartConsumerProcessingMessage", ctx)
}

// StartConsumerProcessingMessage indicates an expected call of StartConsumerProcessingMessage.
func (mr *MockServiceReaderMockRecorder) StartConsumerProcessingMessage(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConsumerProcessingMessage", reflect.TypeOf((*MockServiceReader)(nil).StartConsumerProcessingMessage), ctx)
}
