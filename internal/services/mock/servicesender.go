// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_messagesender is a generated GoMock package.
package mock_services

import (
	context "context"
	model "messageprocessor/internal/model"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceSender is a mock of ServiceSender interface.
type MockServiceSender struct {
	ctrl     *gomock.Controller
	recorder *MockServiceSenderMockRecorder
}

// MockServiceSenderMockRecorder is the mock recorder for MockServiceSender.
type MockServiceSenderMockRecorder struct {
	mock *MockServiceSender
}

// NewMockServiceSender creates a new mock instance.
func NewMockServiceSender(ctrl *gomock.Controller) *MockServiceSender {
	mock := &MockServiceSender{ctrl: ctrl}
	mock.recorder = &MockServiceSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceSender) EXPECT() *MockServiceSenderMockRecorder {
	return m.recorder
}

// SaveMessage mocks base method.
func (m *MockServiceSender) SaveMessage(msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMessage indicates an expected call of SaveMessage.
func (mr *MockServiceSenderMockRecorder) SaveMessage(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessage", reflect.TypeOf((*MockServiceSender)(nil).SaveMessage), msg)
}

// SentMessages mocks base method.
func (m *MockServiceSender) SentMessages() ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SentMessages")
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SentMessages indicates an expected call of SentMessages.
func (mr *MockServiceSenderMockRecorder) SentMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentMessages", reflect.TypeOf((*MockServiceSender)(nil).SentMessages))
}

// StartProcessingMessage mocks base method.
func (m *MockServiceSender) StartProcessingMessage(ctx context.Context, handlePeriod time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartProcessingMessage", ctx, handlePeriod)
}

// StartProcessingMessage indicates an expected call of StartProcessingMessage.
func (mr *MockServiceSenderMockRecorder) StartProcessingMessage(ctx, handlePeriod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProcessingMessage", reflect.TypeOf((*MockServiceSender)(nil).StartProcessingMessage), ctx, handlePeriod)
}
