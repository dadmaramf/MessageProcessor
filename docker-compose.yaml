version: "3.8"

services:

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "80:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      # - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:9092,kafka-2:9092,kafka-3:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
    - kafka
      # - kafka-1
      # - kafka-2
      # - kafka-3
    networks:
      - app-network

  zookeeper:
    image: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "./docker/zookeeper_data:/bitnami"
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
      ZOOKEEPER_CLIENT_PORT: 21281
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka
    # volumes:
    #   - "./docker/kafka_data/500:/kafka"
    environment:
      KAFKA_BROKER_ID: 500
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app-network 

  # kafka-1:
  #   image: wurstmeister/kafka
  #   ports:
  #     - "9095:9094"
  #   volumes:
  #     - "./docker/kafka_data/500:/kafka"
  #   environment:
  #     KAFKA_BROKED_ID: 500
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
  #     KAFKA_LISTENERS: INTERNAL://kafka-1:9092,OUTSIDE://kafka-1:9094
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:9092,OUTSIDE://localhost:9095
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKS_LOG_DIRS: /kafka/logs
  #   depends_on:
  #     - zookeeper
  #   networks:
  #     - app-network 

  # kafka-2:
  #   image: wurstmeister/kafka
  #   ports:
  #     - "9096:9094"
  #   volumes:
  #     - "./docker/kafka_data/501:/bitnami"
  #   environment:
  #     KAFKA_BROKED_ID: 501
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
  #     KAFKA_LISTENERS: INTERNAL://kafka-2:9092,OUTSIDE://kafka-2:9094
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:9092,OUTSIDE://localhost:9096
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKS_LOG_DIRS: /kafka/logs
  #   depends_on:
  #     - zookeeper
  #   networks:
  #     - app-network 

  # kafka-3:
  #   image: wurstmeister/kafka
  #   ports:
  #     - "9097:9094"
  #   volumes:
  #     - "./docker/kafka_data/502:/bitnami"
  #   environment:
  #     KAFKA_BROKED_ID: 502
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
  #     KAFKA_LISTENERS: INTERNAL://kafka-3:9092,OUTSIDE://kafka-3:9094
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:9092,OUTSIDE://localhost:9097
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKS_LOG_DIRS: /kafka/logs
  #   depends_on:
  #     - zookeeper
  #   networks:
  #     - app-network

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: messages
    # volumes:
    #   - ./docker/postgres_data:/var/lib/postgresql/data
    networks:
      - app-network


  admin:
    image: adminer
    restart: always
    depends_on:
      - postgres
    ports:
      - 81:8080
    networks:
      - app-network

  app:
    build:
      context: .
      dockerfile: Dockerfile.app
    depends_on:
      - kafka-ui
      - postgres
    ports:
      - "8081:8081"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge





